/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// CodeChallenge
    /// </summary>
    [DataContract(Name = "CodeChallenge")]
    public partial class CodeChallenge : IEquatable<CodeChallenge>, IValidatableObject
    {
        /// <summary>
        /// The code verifier.
        /// </summary>
        /// <value>The code verifier.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            /// <summary>
            /// Enum Plain for value: plain
            /// </summary>
            [EnumMember(Value = "plain")]
            Plain = 1,

            /// <summary>
            /// Enum S256 for value: S256
            /// </summary>
            [EnumMember(Value = "S256")]
            S256 = 2

        }


        /// <summary>
        /// The code verifier.
        /// </summary>
        /// <value>The code verifier.</value>
        /// <example>&quot;S256&quot;</example>
        [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeChallenge" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CodeChallenge() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeChallenge" /> class.
        /// </summary>
        /// <param name="codeChallenge">The code challenge. (required).</param>
        /// <param name="method">The code verifier. (required).</param>
        public CodeChallenge(string codeChallenge = default(string), MethodEnum method = default(MethodEnum))
        {
            // to ensure "codeChallenge" is required (not null)
            if (codeChallenge == null)
            {
                throw new ArgumentNullException("codeChallenge is a required property for CodeChallenge and cannot be null");
            }
            this._CodeChallenge = codeChallenge;
            this.Method = method;
        }

        /// <summary>
        /// The code challenge.
        /// </summary>
        /// <value>The code challenge.</value>
        /// <example>&quot;code&quot;</example>
        [DataMember(Name = "codeChallenge", IsRequired = true, EmitDefaultValue = true)]
        public string _CodeChallenge { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeChallenge {\n");
            sb.Append("  _CodeChallenge: ").Append(_CodeChallenge).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeChallenge);
        }

        /// <summary>
        /// Returns true if CodeChallenge instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeChallenge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeChallenge input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._CodeChallenge == input._CodeChallenge ||
                    (this._CodeChallenge != null &&
                    this._CodeChallenge.Equals(input._CodeChallenge))
                ) && 
                (
                    this.Method == input.Method ||
                    this.Method.Equals(input.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._CodeChallenge != null)
                {
                    hashCode = (hashCode * 59) + this._CodeChallenge.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Method.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
