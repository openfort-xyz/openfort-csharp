/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// CreateAuthPlayerRequest
    /// </summary>
    [DataContract(Name = "CreateAuthPlayerRequest")]
    public partial class CreateAuthPlayerRequest : IEquatable<CreateAuthPlayerRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ThirdPartyProvider
        /// </summary>
        [DataMember(Name = "thirdPartyProvider", IsRequired = true, EmitDefaultValue = true)]
        public ThirdPartyOAuthProvider ThirdPartyProvider { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthPlayerRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAuthPlayerRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAuthPlayerRequest" /> class.
        /// </summary>
        /// <param name="thirdPartyUserId">The third party user id. (required).</param>
        /// <param name="thirdPartyProvider">thirdPartyProvider (required).</param>
        /// <param name="preGenerateEmbeddedAccount">Pre generate embedded account. (required).</param>
        /// <param name="chainId">The chain ID. Must be a [supported chain](/chains)..</param>
        /// <param name="metadata">metadata.</param>
        public CreateAuthPlayerRequest(string thirdPartyUserId = default(string), ThirdPartyOAuthProvider thirdPartyProvider = default(ThirdPartyOAuthProvider), bool preGenerateEmbeddedAccount = default(bool), int chainId = default(int), Dictionary<string, PlayerMetadataValue> metadata = default(Dictionary<string, PlayerMetadataValue>))
        {
            // to ensure "thirdPartyUserId" is required (not null)
            if (thirdPartyUserId == null)
            {
                throw new ArgumentNullException("thirdPartyUserId is a required property for CreateAuthPlayerRequest and cannot be null");
            }
            this.ThirdPartyUserId = thirdPartyUserId;
            this.ThirdPartyProvider = thirdPartyProvider;
            this.PreGenerateEmbeddedAccount = preGenerateEmbeddedAccount;
            this.ChainId = chainId;
            this.Metadata = metadata;
        }

        /// <summary>
        /// The third party user id.
        /// </summary>
        /// <value>The third party user id.</value>
        /// <example>&quot;dsajkl23r43l1234jl&quot;</example>
        [DataMember(Name = "thirdPartyUserId", IsRequired = true, EmitDefaultValue = true)]
        public string ThirdPartyUserId { get; set; }

        /// <summary>
        /// Pre generate embedded account.
        /// </summary>
        /// <value>Pre generate embedded account.</value>
        /// <example>true</example>
        [DataMember(Name = "preGenerateEmbeddedAccount", IsRequired = true, EmitDefaultValue = true)]
        public bool PreGenerateEmbeddedAccount { get; set; }

        /// <summary>
        /// The chain ID. Must be a [supported chain](/chains).
        /// </summary>
        /// <value>The chain ID. Must be a [supported chain](/chains).</value>
        /// <example>80002</example>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public Dictionary<string, PlayerMetadataValue> Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAuthPlayerRequest {\n");
            sb.Append("  ThirdPartyUserId: ").Append(ThirdPartyUserId).Append("\n");
            sb.Append("  ThirdPartyProvider: ").Append(ThirdPartyProvider).Append("\n");
            sb.Append("  PreGenerateEmbeddedAccount: ").Append(PreGenerateEmbeddedAccount).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAuthPlayerRequest);
        }

        /// <summary>
        /// Returns true if CreateAuthPlayerRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAuthPlayerRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAuthPlayerRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ThirdPartyUserId == input.ThirdPartyUserId ||
                    (this.ThirdPartyUserId != null &&
                    this.ThirdPartyUserId.Equals(input.ThirdPartyUserId))
                ) && 
                (
                    this.ThirdPartyProvider == input.ThirdPartyProvider ||
                    this.ThirdPartyProvider.Equals(input.ThirdPartyProvider)
                ) && 
                (
                    this.PreGenerateEmbeddedAccount == input.PreGenerateEmbeddedAccount ||
                    this.PreGenerateEmbeddedAccount.Equals(input.PreGenerateEmbeddedAccount)
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    this.Metadata != null &&
                    input.Metadata != null &&
                    this.Metadata.SequenceEqual(input.Metadata)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ThirdPartyUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ThirdPartyUserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ThirdPartyProvider.GetHashCode();
                hashCode = (hashCode * 59) + this.PreGenerateEmbeddedAccount.GetHashCode();
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.Metadata != null)
                {
                    hashCode = (hashCode * 59) + this.Metadata.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
