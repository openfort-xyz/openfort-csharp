/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// CreateExchangeRequest
    /// </summary>
    [DataContract(Name = "CreateExchangeRequest")]
    public partial class CreateExchangeRequest : IEquatable<CreateExchangeRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TradeType
        /// </summary>
        [DataMember(Name = "tradeType", IsRequired = true, EmitDefaultValue = true)]
        public TradeType TradeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExchangeRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateExchangeRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateExchangeRequest" /> class.
        /// </summary>
        /// <param name="chainId">The chain ID. Must be a [supported chain](/chains). (required).</param>
        /// <param name="fromAddress">The public address that will sign and submit the transaction. If you provide one of a &#x60;pla_...&#x60; or &#x60;acc_...&#x60; it will be converted to the corresponding address. (required).</param>
        /// <param name="tokenInAddress">Token address or &#39;native&#39; to sell (required).</param>
        /// <param name="tokenOutAddress">Token address or &#39;native&#39; to buy (required).</param>
        /// <param name="amount">Amount in the smallest unit of the token (required).</param>
        /// <param name="tradeType">tradeType (required).</param>
        /// <param name="slippagePercent">The percentage of slippage tolerance. Default &#x3D; 0.1. Max &#x3D; 50. Min &#x3D; 0.</param>
        /// <param name="maxHops">Maximum hops allowed in optimal route. Default is 2.</param>
        /// <param name="deadline">Latest time swap can execute. Default is 15 minutes.</param>
        /// <param name="policy">ID of the Policy that defines the gas sponsorship strategy (starts with &#x60;pol_&#x60;). If no Policy is provided, the own Account native token funds will be used to pay for gas..</param>
        /// <param name="optimistic">Set to &#x60;true&#x60; to indicate that the transactionIntent request should be resolved as soon as possible, after the transactionIntent is created and simulated and before it arrives on chain..</param>
        public CreateExchangeRequest(int chainId = default(int), string fromAddress = default(string), string tokenInAddress = default(string), string tokenOutAddress = default(string), string amount = default(string), TradeType tradeType = default(TradeType), double slippagePercent = default(double), double maxHops = default(double), double deadline = default(double), string policy = default(string), bool optimistic = default(bool))
        {
            this.ChainId = chainId;
            // to ensure "fromAddress" is required (not null)
            if (fromAddress == null)
            {
                throw new ArgumentNullException("fromAddress is a required property for CreateExchangeRequest and cannot be null");
            }
            this.FromAddress = fromAddress;
            // to ensure "tokenInAddress" is required (not null)
            if (tokenInAddress == null)
            {
                throw new ArgumentNullException("tokenInAddress is a required property for CreateExchangeRequest and cannot be null");
            }
            this.TokenInAddress = tokenInAddress;
            // to ensure "tokenOutAddress" is required (not null)
            if (tokenOutAddress == null)
            {
                throw new ArgumentNullException("tokenOutAddress is a required property for CreateExchangeRequest and cannot be null");
            }
            this.TokenOutAddress = tokenOutAddress;
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for CreateExchangeRequest and cannot be null");
            }
            this.Amount = amount;
            this.TradeType = tradeType;
            this.SlippagePercent = slippagePercent;
            this.MaxHops = maxHops;
            this.Deadline = deadline;
            this.Policy = policy;
            this.Optimistic = optimistic;
        }

        /// <summary>
        /// The chain ID. Must be a [supported chain](/chains).
        /// </summary>
        /// <value>The chain ID. Must be a [supported chain](/chains).</value>
        /// <example>80002</example>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public int ChainId { get; set; }

        /// <summary>
        /// The public address that will sign and submit the transaction. If you provide one of a &#x60;pla_...&#x60; or &#x60;acc_...&#x60; it will be converted to the corresponding address.
        /// </summary>
        /// <value>The public address that will sign and submit the transaction. If you provide one of a &#x60;pla_...&#x60; or &#x60;acc_...&#x60; it will be converted to the corresponding address.</value>
        /// <example>&quot;0x680d2719F09B23F644c136Ab7336D42b6a76AdcC&quot;</example>
        [DataMember(Name = "fromAddress", IsRequired = true, EmitDefaultValue = true)]
        public string FromAddress { get; set; }

        /// <summary>
        /// Token address or &#39;native&#39; to sell
        /// </summary>
        /// <value>Token address or &#39;native&#39; to sell</value>
        /// <example>&quot;0x008518e76FAD03f592Bbb7E394C762d5FD54cb97&quot;</example>
        [DataMember(Name = "tokenInAddress", IsRequired = true, EmitDefaultValue = true)]
        public string TokenInAddress { get; set; }

        /// <summary>
        /// Token address or &#39;native&#39; to buy
        /// </summary>
        /// <value>Token address or &#39;native&#39; to buy</value>
        /// <example>&quot;0xF65B6f9c94187276C7d91F4F74134751d248bFeA&quot;</example>
        [DataMember(Name = "tokenOutAddress", IsRequired = true, EmitDefaultValue = true)]
        public string TokenOutAddress { get; set; }

        /// <summary>
        /// Amount in the smallest unit of the token
        /// </summary>
        /// <value>Amount in the smallest unit of the token</value>
        /// <example>&quot;100000&quot;</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string Amount { get; set; }

        /// <summary>
        /// The percentage of slippage tolerance. Default &#x3D; 0.1. Max &#x3D; 50. Min &#x3D; 0
        /// </summary>
        /// <value>The percentage of slippage tolerance. Default &#x3D; 0.1. Max &#x3D; 50. Min &#x3D; 0</value>
        /// <example>20</example>
        [DataMember(Name = "slippagePercent", EmitDefaultValue = false)]
        public double SlippagePercent { get; set; }

        /// <summary>
        /// Maximum hops allowed in optimal route. Default is 2
        /// </summary>
        /// <value>Maximum hops allowed in optimal route. Default is 2</value>
        /// <example>2</example>
        [DataMember(Name = "maxHops", EmitDefaultValue = false)]
        public double MaxHops { get; set; }

        /// <summary>
        /// Latest time swap can execute. Default is 15 minutes
        /// </summary>
        /// <value>Latest time swap can execute. Default is 15 minutes</value>
        /// <example>15</example>
        [DataMember(Name = "deadline", EmitDefaultValue = false)]
        public double Deadline { get; set; }

        /// <summary>
        /// ID of the Policy that defines the gas sponsorship strategy (starts with &#x60;pol_&#x60;). If no Policy is provided, the own Account native token funds will be used to pay for gas.
        /// </summary>
        /// <value>ID of the Policy that defines the gas sponsorship strategy (starts with &#x60;pol_&#x60;). If no Policy is provided, the own Account native token funds will be used to pay for gas.</value>
        /// <example>&quot;pol_7e07ae30-2a4d-48fa-803f-361da94905dd&quot;</example>
        [DataMember(Name = "policy", EmitDefaultValue = false)]
        public string Policy { get; set; }

        /// <summary>
        /// Set to &#x60;true&#x60; to indicate that the transactionIntent request should be resolved as soon as possible, after the transactionIntent is created and simulated and before it arrives on chain.
        /// </summary>
        /// <value>Set to &#x60;true&#x60; to indicate that the transactionIntent request should be resolved as soon as possible, after the transactionIntent is created and simulated and before it arrives on chain.</value>
        /// <example>true</example>
        [DataMember(Name = "optimistic", EmitDefaultValue = true)]
        public bool Optimistic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateExchangeRequest {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  FromAddress: ").Append(FromAddress).Append("\n");
            sb.Append("  TokenInAddress: ").Append(TokenInAddress).Append("\n");
            sb.Append("  TokenOutAddress: ").Append(TokenOutAddress).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TradeType: ").Append(TradeType).Append("\n");
            sb.Append("  SlippagePercent: ").Append(SlippagePercent).Append("\n");
            sb.Append("  MaxHops: ").Append(MaxHops).Append("\n");
            sb.Append("  Deadline: ").Append(Deadline).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Optimistic: ").Append(Optimistic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateExchangeRequest);
        }

        /// <summary>
        /// Returns true if CreateExchangeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateExchangeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateExchangeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.FromAddress == input.FromAddress ||
                    (this.FromAddress != null &&
                    this.FromAddress.Equals(input.FromAddress))
                ) && 
                (
                    this.TokenInAddress == input.TokenInAddress ||
                    (this.TokenInAddress != null &&
                    this.TokenInAddress.Equals(input.TokenInAddress))
                ) && 
                (
                    this.TokenOutAddress == input.TokenOutAddress ||
                    (this.TokenOutAddress != null &&
                    this.TokenOutAddress.Equals(input.TokenOutAddress))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.TradeType == input.TradeType ||
                    this.TradeType.Equals(input.TradeType)
                ) && 
                (
                    this.SlippagePercent == input.SlippagePercent ||
                    this.SlippagePercent.Equals(input.SlippagePercent)
                ) && 
                (
                    this.MaxHops == input.MaxHops ||
                    this.MaxHops.Equals(input.MaxHops)
                ) && 
                (
                    this.Deadline == input.Deadline ||
                    this.Deadline.Equals(input.Deadline)
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Optimistic == input.Optimistic ||
                    this.Optimistic.Equals(input.Optimistic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.FromAddress != null)
                {
                    hashCode = (hashCode * 59) + this.FromAddress.GetHashCode();
                }
                if (this.TokenInAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenInAddress.GetHashCode();
                }
                if (this.TokenOutAddress != null)
                {
                    hashCode = (hashCode * 59) + this.TokenOutAddress.GetHashCode();
                }
                if (this.Amount != null)
                {
                    hashCode = (hashCode * 59) + this.Amount.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TradeType.GetHashCode();
                hashCode = (hashCode * 59) + this.SlippagePercent.GetHashCode();
                hashCode = (hashCode * 59) + this.MaxHops.GetHashCode();
                hashCode = (hashCode * 59) + this.Deadline.GetHashCode();
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Optimistic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
