/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// CreatePaymasterRequest
    /// </summary>
    [DataContract(Name = "CreatePaymasterRequest")]
    public partial class CreatePaymasterRequest : IEquatable<CreatePaymasterRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymasterRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreatePaymasterRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymasterRequest" /> class.
        /// </summary>
        /// <param name="address">Specifies the address of the paymaster (required).</param>
        /// <param name="url">Specifies the paymaster URL (required).</param>
        /// <param name="context">Specifies the context, that is, the arbitrary data that the specific paymaster may require.</param>
        public CreatePaymasterRequest(string address = default(string), string url = default(string), Object context = default(Object))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreatePaymasterRequest and cannot be null");
            }
            this.Address = address;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for CreatePaymasterRequest and cannot be null");
            }
            this.Url = url;
            this.Context = context;
        }

        /// <summary>
        /// Specifies the address of the paymaster
        /// </summary>
        /// <value>Specifies the address of the paymaster</value>
        /// <example>&quot;0x7d526b7e99fbf52850a183...&quot;</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Specifies the paymaster URL
        /// </summary>
        /// <value>Specifies the paymaster URL</value>
        /// <example>&quot;https://rpc.mypaymaster.xyz&quot;</example>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Specifies the context, that is, the arbitrary data that the specific paymaster may require
        /// </summary>
        /// <value>Specifies the context, that is, the arbitrary data that the specific paymaster may require</value>
        [DataMember(Name = "context", EmitDefaultValue = false)]
        public Object Context { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreatePaymasterRequest {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePaymasterRequest);
        }

        /// <summary>
        /// Returns true if CreatePaymasterRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePaymasterRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePaymasterRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Context != null)
                {
                    hashCode = (hashCode * 59) + this.Context.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
