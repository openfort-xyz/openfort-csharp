/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// ProviderRequest
    /// </summary>
    [DataContract(Name = "ProviderRequest")]
    public partial class ProviderRequest : IEquatable<ProviderRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProviderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderRequest" /> class.
        /// </summary>
        /// <param name="googleClientId">The Google client ID. (required).</param>
        /// <param name="googleEnabled">Specifies whether Google Auth is enabled. (required).</param>
        /// <param name="googleClientSecret">The Google client secret. (required).</param>
        public ProviderRequest(string googleClientId = default(string), bool googleEnabled = default(bool), string googleClientSecret = default(string))
        {
            // to ensure "googleClientId" is required (not null)
            if (googleClientId == null)
            {
                throw new ArgumentNullException("googleClientId is a required property for ProviderRequest and cannot be null");
            }
            this.GoogleClientId = googleClientId;
            this.GoogleEnabled = googleEnabled;
            // to ensure "googleClientSecret" is required (not null)
            if (googleClientSecret == null)
            {
                throw new ArgumentNullException("googleClientSecret is a required property for ProviderRequest and cannot be null");
            }
            this.GoogleClientSecret = googleClientSecret;
        }

        /// <summary>
        /// The Google client ID.
        /// </summary>
        /// <value>The Google client ID.</value>
        [DataMember(Name = "googleClientId", IsRequired = true, EmitDefaultValue = true)]
        public string GoogleClientId { get; set; }

        /// <summary>
        /// Specifies whether Google Auth is enabled.
        /// </summary>
        /// <value>Specifies whether Google Auth is enabled.</value>
        [DataMember(Name = "googleEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool GoogleEnabled { get; set; }

        /// <summary>
        /// The Google client secret.
        /// </summary>
        /// <value>The Google client secret.</value>
        [DataMember(Name = "googleClientSecret", IsRequired = true, EmitDefaultValue = true)]
        public string GoogleClientSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderRequest {\n");
            sb.Append("  GoogleClientId: ").Append(GoogleClientId).Append("\n");
            sb.Append("  GoogleEnabled: ").Append(GoogleEnabled).Append("\n");
            sb.Append("  GoogleClientSecret: ").Append(GoogleClientSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProviderRequest);
        }

        /// <summary>
        /// Returns true if ProviderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProviderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GoogleClientId == input.GoogleClientId ||
                    (this.GoogleClientId != null &&
                    this.GoogleClientId.Equals(input.GoogleClientId))
                ) && 
                (
                    this.GoogleEnabled == input.GoogleEnabled ||
                    this.GoogleEnabled.Equals(input.GoogleEnabled)
                ) && 
                (
                    this.GoogleClientSecret == input.GoogleClientSecret ||
                    (this.GoogleClientSecret != null &&
                    this.GoogleClientSecret.Equals(input.GoogleClientSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GoogleClientId != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleClientId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GoogleEnabled.GetHashCode();
                if (this.GoogleClientSecret != null)
                {
                    hashCode = (hashCode * 59) + this.GoogleClientSecret.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
