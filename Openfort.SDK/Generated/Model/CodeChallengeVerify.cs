/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// CodeChallengeVerify
    /// </summary>
    [DataContract(Name = "CodeChallengeVerify")]
    public partial class CodeChallengeVerify : IEquatable<CodeChallengeVerify>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeChallengeVerify" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CodeChallengeVerify() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CodeChallengeVerify" /> class.
        /// </summary>
        /// <param name="codeVerifier">The code verifier. (required).</param>
        public CodeChallengeVerify(string codeVerifier = default(string))
        {
            // to ensure "codeVerifier" is required (not null)
            if (codeVerifier == null)
            {
                throw new ArgumentNullException("codeVerifier is a required property for CodeChallengeVerify and cannot be null");
            }
            this.CodeVerifier = codeVerifier;
        }

        /// <summary>
        /// The code verifier.
        /// </summary>
        /// <value>The code verifier.</value>
        /// <example>&quot;verifier&quot;</example>
        [DataMember(Name = "codeVerifier", IsRequired = true, EmitDefaultValue = true)]
        public string CodeVerifier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CodeChallengeVerify {\n");
            sb.Append("  CodeVerifier: ").Append(CodeVerifier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CodeChallengeVerify);
        }

        /// <summary>
        /// Returns true if CodeChallengeVerify instances are equal
        /// </summary>
        /// <param name="input">Instance of CodeChallengeVerify to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CodeChallengeVerify input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CodeVerifier == input.CodeVerifier ||
                    (this.CodeVerifier != null &&
                    this.CodeVerifier.Equals(input.CodeVerifier))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodeVerifier != null)
                {
                    hashCode = (hashCode * 59) + this.CodeVerifier.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
