/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Openfort.SDK.Client.FileParameter;
using OpenAPIDateConverter = Openfort.SDK.Client.OpenAPIDateConverter;

namespace Openfort.SDK.Model
{
    /// <summary>
    /// ProviderResponse
    /// </summary>
    [DataContract(Name = "ProviderResponse")]
    public partial class ProviderResponse : IEquatable<ProviderResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProviderResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProviderResponse" /> class.
        /// </summary>
        /// <param name="eXTERNALGOOGLEENABLED">eXTERNALGOOGLEENABLED.</param>
        /// <param name="eXTERNALGOOGLECLIENTID">eXTERNALGOOGLECLIENTID.</param>
        /// <param name="eXTERNALGOOGLESECRET">eXTERNALGOOGLESECRET.</param>
        /// <param name="livemode">livemode (required).</param>
        public ProviderResponse(bool eXTERNALGOOGLEENABLED = default(bool), string eXTERNALGOOGLECLIENTID = default(string), string eXTERNALGOOGLESECRET = default(string), bool livemode = default(bool))
        {
            this.Livemode = livemode;
            this.EXTERNAL_GOOGLE_ENABLED = eXTERNALGOOGLEENABLED;
            this.EXTERNAL_GOOGLE_CLIENT_ID = eXTERNALGOOGLECLIENTID;
            this.EXTERNAL_GOOGLE_SECRET = eXTERNALGOOGLESECRET;
        }

        /// <summary>
        /// Gets or Sets EXTERNAL_GOOGLE_ENABLED
        /// </summary>
        [DataMember(Name = "EXTERNAL_GOOGLE_ENABLED", EmitDefaultValue = true)]
        public bool EXTERNAL_GOOGLE_ENABLED { get; set; }

        /// <summary>
        /// Gets or Sets EXTERNAL_GOOGLE_CLIENT_ID
        /// </summary>
        [DataMember(Name = "EXTERNAL_GOOGLE_CLIENT_ID", EmitDefaultValue = false)]
        public string EXTERNAL_GOOGLE_CLIENT_ID { get; set; }

        /// <summary>
        /// Gets or Sets EXTERNAL_GOOGLE_SECRET
        /// </summary>
        [DataMember(Name = "EXTERNAL_GOOGLE_SECRET", EmitDefaultValue = false)]
        public string EXTERNAL_GOOGLE_SECRET { get; set; }

        /// <summary>
        /// Gets or Sets Livemode
        /// </summary>
        [DataMember(Name = "livemode", IsRequired = true, EmitDefaultValue = true)]
        public bool Livemode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProviderResponse {\n");
            sb.Append("  EXTERNAL_GOOGLE_ENABLED: ").Append(EXTERNAL_GOOGLE_ENABLED).Append("\n");
            sb.Append("  EXTERNAL_GOOGLE_CLIENT_ID: ").Append(EXTERNAL_GOOGLE_CLIENT_ID).Append("\n");
            sb.Append("  EXTERNAL_GOOGLE_SECRET: ").Append(EXTERNAL_GOOGLE_SECRET).Append("\n");
            sb.Append("  Livemode: ").Append(Livemode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProviderResponse);
        }

        /// <summary>
        /// Returns true if ProviderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProviderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProviderResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EXTERNAL_GOOGLE_ENABLED == input.EXTERNAL_GOOGLE_ENABLED ||
                    this.EXTERNAL_GOOGLE_ENABLED.Equals(input.EXTERNAL_GOOGLE_ENABLED)
                ) && 
                (
                    this.EXTERNAL_GOOGLE_CLIENT_ID == input.EXTERNAL_GOOGLE_CLIENT_ID ||
                    (this.EXTERNAL_GOOGLE_CLIENT_ID != null &&
                    this.EXTERNAL_GOOGLE_CLIENT_ID.Equals(input.EXTERNAL_GOOGLE_CLIENT_ID))
                ) && 
                (
                    this.EXTERNAL_GOOGLE_SECRET == input.EXTERNAL_GOOGLE_SECRET ||
                    (this.EXTERNAL_GOOGLE_SECRET != null &&
                    this.EXTERNAL_GOOGLE_SECRET.Equals(input.EXTERNAL_GOOGLE_SECRET))
                ) && 
                (
                    this.Livemode == input.Livemode ||
                    this.Livemode.Equals(input.Livemode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.EXTERNAL_GOOGLE_ENABLED.GetHashCode();
                if (this.EXTERNAL_GOOGLE_CLIENT_ID != null)
                {
                    hashCode = (hashCode * 59) + this.EXTERNAL_GOOGLE_CLIENT_ID.GetHashCode();
                }
                if (this.EXTERNAL_GOOGLE_SECRET != null)
                {
                    hashCode = (hashCode * 59) + this.EXTERNAL_GOOGLE_SECRET.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Livemode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
