/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Openfort.SDK.Client;
using Openfort.SDK.Model;

namespace Openfort.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationTriggersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Create a trigger for the provided notification.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <returns>NotificationTriggerResponse</returns>
        NotificationTriggerResponse CreateNotificationTrigger(CreateNotificationTriggerRequest createNotificationTriggerRequest);

        /// <summary>
        /// Create a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Create a trigger for the provided notification.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <returns>ApiResponse of NotificationTriggerResponse</returns>
        ApiResponse<NotificationTriggerResponse> CreateNotificationTriggerWithHttpInfo(CreateNotificationTriggerRequest createNotificationTriggerRequest);
        /// <summary>
        /// Deletes a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Delete a notification trigger by providing its notification trigger id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>NotificationTriggerDeleteResponse</returns>
        NotificationTriggerDeleteResponse DeleteNotificationTrigger(string id);

        /// <summary>
        /// Deletes a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Delete a notification trigger by providing its notification trigger id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>ApiResponse of NotificationTriggerDeleteResponse</returns>
        ApiResponse<NotificationTriggerDeleteResponse> DeleteNotificationTriggerWithHttpInfo(string id);
        /// <summary>
        /// Get existing notification trigger.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>NotificationTriggerResponse</returns>
        NotificationTriggerResponse GetNotificationTrigger(string id);

        /// <summary>
        /// Get existing notification trigger.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>ApiResponse of NotificationTriggerResponse</returns>
        ApiResponse<NotificationTriggerResponse> GetNotificationTriggerWithHttpInfo(string id);
        /// <summary>
        /// List notification triggers of a notification.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>NotificationTriggerListResponse</returns>
        NotificationTriggerListResponse GetNotificationTriggers(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?));

        /// <summary>
        /// List notification triggers of a notification.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>ApiResponse of NotificationTriggerListResponse</returns>
        ApiResponse<NotificationTriggerListResponse> GetNotificationTriggersWithHttpInfo(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationTriggersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Create a trigger for the provided notification.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerResponse</returns>
        System.Threading.Tasks.Task<NotificationTriggerResponse> CreateNotificationTriggerAsync(CreateNotificationTriggerRequest createNotificationTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Create a trigger for the provided notification.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationTriggerResponse>> CreateNotificationTriggerWithHttpInfoAsync(CreateNotificationTriggerRequest createNotificationTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Delete a notification trigger by providing its notification trigger id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerDeleteResponse</returns>
        System.Threading.Tasks.Task<NotificationTriggerDeleteResponse> DeleteNotificationTriggerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a notification trigger object.
        /// </summary>
        /// <remarks>
        /// Delete a notification trigger by providing its notification trigger id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationTriggerDeleteResponse>> DeleteNotificationTriggerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get existing notification trigger.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerResponse</returns>
        System.Threading.Tasks.Task<NotificationTriggerResponse> GetNotificationTriggerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get existing notification trigger.
        /// </summary>
        /// <remarks>
        /// Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationTriggerResponse>> GetNotificationTriggerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List notification triggers of a notification.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerListResponse</returns>
        System.Threading.Tasks.Task<NotificationTriggerListResponse> GetNotificationTriggersAsync(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List notification triggers of a notification.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationTriggerListResponse>> GetNotificationTriggersWithHttpInfoAsync(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationTriggersApi : INotificationTriggersApiSync, INotificationTriggersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationTriggersApi : IDisposable, INotificationTriggersApi
    {
        private Openfort.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public NotificationTriggersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public NotificationTriggersApi(string basePath)
        {
            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public NotificationTriggersApi(Openfort.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationTriggersApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationTriggersApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public NotificationTriggersApi(HttpClient client, Openfort.SDK.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationTriggersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public NotificationTriggersApi(Openfort.SDK.Client.ISynchronousClient client, Openfort.SDK.Client.IAsynchronousClient asyncClient, Openfort.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.SDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a notification trigger object. Create a trigger for the provided notification.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <returns>NotificationTriggerResponse</returns>
        public NotificationTriggerResponse CreateNotificationTrigger(CreateNotificationTriggerRequest createNotificationTriggerRequest)
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> localVarResponse = CreateNotificationTriggerWithHttpInfo(createNotificationTriggerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a notification trigger object. Create a trigger for the provided notification.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <returns>ApiResponse of NotificationTriggerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> CreateNotificationTriggerWithHttpInfo(CreateNotificationTriggerRequest createNotificationTriggerRequest)
        {
            // verify the required parameter 'createNotificationTriggerRequest' is set
            if (createNotificationTriggerRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createNotificationTriggerRequest' when calling NotificationTriggersApi->CreateNotificationTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createNotificationTriggerRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NotificationTriggerResponse>("/v1/notification_triggers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a notification trigger object. Create a trigger for the provided notification.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerResponse</returns>
        public async System.Threading.Tasks.Task<NotificationTriggerResponse> CreateNotificationTriggerAsync(CreateNotificationTriggerRequest createNotificationTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> localVarResponse = await CreateNotificationTriggerWithHttpInfoAsync(createNotificationTriggerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a notification trigger object. Create a trigger for the provided notification.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNotificationTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse>> CreateNotificationTriggerWithHttpInfoAsync(CreateNotificationTriggerRequest createNotificationTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNotificationTriggerRequest' is set
            if (createNotificationTriggerRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createNotificationTriggerRequest' when calling NotificationTriggersApi->CreateNotificationTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createNotificationTriggerRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<NotificationTriggerResponse>("/v1/notification_triggers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a notification trigger object. Delete a notification trigger by providing its notification trigger id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>NotificationTriggerDeleteResponse</returns>
        public NotificationTriggerDeleteResponse DeleteNotificationTrigger(string id)
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerDeleteResponse> localVarResponse = DeleteNotificationTriggerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a notification trigger object. Delete a notification trigger by providing its notification trigger id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>ApiResponse of NotificationTriggerDeleteResponse</returns>
        public Openfort.SDK.Client.ApiResponse<NotificationTriggerDeleteResponse> DeleteNotificationTriggerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationTriggersApi->DeleteNotificationTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<NotificationTriggerDeleteResponse>("/v1/notification_triggers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a notification trigger object. Delete a notification trigger by providing its notification trigger id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerDeleteResponse</returns>
        public async System.Threading.Tasks.Task<NotificationTriggerDeleteResponse> DeleteNotificationTriggerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerDeleteResponse> localVarResponse = await DeleteNotificationTriggerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a notification trigger object. Delete a notification trigger by providing its notification trigger id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<NotificationTriggerDeleteResponse>> DeleteNotificationTriggerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationTriggersApi->DeleteNotificationTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<NotificationTriggerDeleteResponse>("/v1/notification_triggers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing notification trigger. Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>NotificationTriggerResponse</returns>
        public NotificationTriggerResponse GetNotificationTrigger(string id)
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> localVarResponse = GetNotificationTriggerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing notification trigger. Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <returns>ApiResponse of NotificationTriggerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> GetNotificationTriggerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationTriggersApi->GetNotificationTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationTriggerResponse>("/v1/notification_triggers/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get existing notification trigger. Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerResponse</returns>
        public async System.Threading.Tasks.Task<NotificationTriggerResponse> GetNotificationTriggerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse> localVarResponse = await GetNotificationTriggerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get existing notification trigger. Retrieves the details of an existing notification trigger.  Supply the unique notification trigger ID.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique notification trigger ID (starts with ntr_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<NotificationTriggerResponse>> GetNotificationTriggerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling NotificationTriggersApi->GetNotificationTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationTriggerResponse>("/v1/notification_triggers/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notification triggers of a notification. Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>NotificationTriggerListResponse</returns>
        public NotificationTriggerListResponse GetNotificationTriggers(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?))
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerListResponse> localVarResponse = GetNotificationTriggersWithHttpInfo(notification, limit, skip, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List notification triggers of a notification. Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <returns>ApiResponse of NotificationTriggerListResponse</returns>
        public Openfort.SDK.Client.ApiResponse<NotificationTriggerListResponse> GetNotificationTriggersWithHttpInfo(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?))
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'notification' when calling NotificationTriggersApi->GetNotificationTriggers");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "notification", notification));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationTriggerListResponse>("/v1/notification_triggers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationTriggers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List notification triggers of a notification. Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationTriggerListResponse</returns>
        public async System.Threading.Tasks.Task<NotificationTriggerListResponse> GetNotificationTriggersAsync(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<NotificationTriggerListResponse> localVarResponse = await GetNotificationTriggersWithHttpInfoAsync(notification, limit, skip, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List notification triggers of a notification. Returns a list of triggers of a notification.  Triggers define the conditions that will trigger a notification.  Triggers are returned sorted by creation date, with the most recently created accounts appearing first.  By default, a maximum of 10 notification triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification">Specifies the unique notification ID (starts with not_).</param>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationTriggerListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<NotificationTriggerListResponse>> GetNotificationTriggersWithHttpInfoAsync(string notification, int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'notification' when calling NotificationTriggersApi->GetNotificationTriggers");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "notification", notification));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationTriggerListResponse>("/v1/notification_triggers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationTriggers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
