/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Openfort.SDK.Client;
using Openfort.SDK.Model;

namespace Openfort.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint creates oauth configuration for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <returns>OAuthConfig</returns>
        OAuthConfig CreateOAuthConfig(OAuthConfig body);

        /// <summary>
        /// Create oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint creates oauth configuration for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <returns>ApiResponse of OAuthConfig</returns>
        ApiResponse<OAuthConfig> CreateOAuthConfigWithHttpInfo(OAuthConfig body);
        /// <summary>
        /// Deletes a player auth object.
        /// </summary>
        /// <remarks>
        /// Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse DeleteAuthPlayer(string id);

        /// <summary>
        /// Deletes a player auth object.
        /// </summary>
        /// <remarks>
        /// Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> DeleteAuthPlayerWithHttpInfo(string id);
        /// <summary>
        /// Delete oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns></returns>
        void DeleteOAuthConfig(OAuthProvider provider);

        /// <summary>
        /// Delete oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteOAuthConfigWithHttpInfo(OAuthProvider provider);
        /// <summary>
        /// List authenticated players.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <returns>AuthPlayerListResponse</returns>
        AuthPlayerListResponse GetAuthPlayers(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string));

        /// <summary>
        /// List authenticated players.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <returns>ApiResponse of AuthPlayerListResponse</returns>
        ApiResponse<AuthPlayerListResponse> GetAuthPlayersWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string));
        /// <summary>
        /// Get oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>OAuthConfig</returns>
        OAuthConfig GetOAuthConfig(OAuthProvider provider);

        /// <summary>
        /// Get oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>ApiResponse of OAuthConfig</returns>
        ApiResponse<OAuthConfig> GetOAuthConfigWithHttpInfo(OAuthProvider provider);
        /// <summary>
        /// List of oauth configurations.
        /// </summary>
        /// <remarks>
        /// List configured OAuth methods for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuthConfigListResponse</returns>
        OAuthConfigListResponse ListOAuthConfig();

        /// <summary>
        /// List of oauth configurations.
        /// </summary>
        /// <remarks>
        /// List configured OAuth methods for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuthConfigListResponse</returns>
        ApiResponse<OAuthConfigListResponse> ListOAuthConfigWithHttpInfo();
        /// <summary>
        /// Verify auth token.
        /// </summary>
        /// <remarks>
        /// Verifies the token generated by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <returns>AuthSessionResponse</returns>
        AuthSessionResponse VerifyAuthToken(string token);

        /// <summary>
        /// Verify auth token.
        /// </summary>
        /// <remarks>
        /// Verifies the token generated by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <returns>ApiResponse of AuthSessionResponse</returns>
        ApiResponse<AuthSessionResponse> VerifyAuthTokenWithHttpInfo(string token);
        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        [Obsolete]
        PlayerResponse VerifyOAuth(OAuthProvider provider, OAuthRequest oAuthRequest);

        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        [Obsolete]
        ApiResponse<PlayerResponse> VerifyOAuthWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest);
        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        PlayerResponse VerifyOAuthToken(AuthenticateOAuthRequest authenticateOAuthRequest);

        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        ApiResponse<PlayerResponse> VerifyOAuthTokenWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint creates oauth configuration for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfig</returns>
        System.Threading.Tasks.Task<OAuthConfig> CreateOAuthConfigAsync(OAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint creates oauth configuration for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthConfig>> CreateOAuthConfigWithHttpInfoAsync(OAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a player auth object.
        /// </summary>
        /// <remarks>
        /// Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> DeleteAuthPlayerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a player auth object.
        /// </summary>
        /// <remarks>
        /// Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> DeleteAuthPlayerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteOAuthConfigAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteOAuthConfigWithHttpInfoAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List authenticated players.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerListResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerListResponse> GetAuthPlayersAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List authenticated players.
        /// </summary>
        /// <remarks>
        /// Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerListResponse>> GetAuthPlayersWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfig</returns>
        System.Threading.Tasks.Task<OAuthConfig> GetOAuthConfigAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get oauth configuration.
        /// </summary>
        /// <remarks>
        /// The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfig)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthConfig>> GetOAuthConfigWithHttpInfoAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List of oauth configurations.
        /// </summary>
        /// <remarks>
        /// List configured OAuth methods for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfigListResponse</returns>
        System.Threading.Tasks.Task<OAuthConfigListResponse> ListOAuthConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List of oauth configurations.
        /// </summary>
        /// <remarks>
        /// List configured OAuth methods for the current project environment.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfigListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthConfigListResponse>> ListOAuthConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify auth token.
        /// </summary>
        /// <remarks>
        /// Verifies the token generated by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSessionResponse</returns>
        System.Threading.Tasks.Task<AuthSessionResponse> VerifyAuthTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify auth token.
        /// </summary>
        /// <remarks>
        /// Verifies the token generated by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSessionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthSessionResponse>> VerifyAuthTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> VerifyOAuthWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthTokenAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> VerifyOAuthTokenWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminAuthenticationApi : IAdminAuthenticationApiSync, IAdminAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminAuthenticationApi : IDisposable, IAdminAuthenticationApi
    {
        private Openfort.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AdminAuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AdminAuthenticationApi(string basePath)
        {
            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AdminAuthenticationApi(Openfort.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminAuthenticationApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminAuthenticationApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AdminAuthenticationApi(HttpClient client, Openfort.SDK.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminAuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AdminAuthenticationApi(Openfort.SDK.Client.ISynchronousClient client, Openfort.SDK.Client.IAsynchronousClient asyncClient, Openfort.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.SDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create oauth configuration. The endpoint creates oauth configuration for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <returns>OAuthConfig</returns>
        public OAuthConfig CreateOAuthConfig(OAuthConfig body)
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfig> localVarResponse = CreateOAuthConfigWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create oauth configuration. The endpoint creates oauth configuration for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <returns>ApiResponse of OAuthConfig</returns>
        public Openfort.SDK.Client.ApiResponse<OAuthConfig> CreateOAuthConfigWithHttpInfo(OAuthConfig body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'body' when calling AdminAuthenticationApi->CreateOAuthConfig");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuthConfig>("/iam/v1/oauth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create oauth configuration. The endpoint creates oauth configuration for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfig</returns>
        public async System.Threading.Tasks.Task<OAuthConfig> CreateOAuthConfigAsync(OAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfig> localVarResponse = await CreateOAuthConfigWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create oauth configuration. The endpoint creates oauth configuration for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Specifies the oauth provider specific configuration.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfig)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<OAuthConfig>> CreateOAuthConfigWithHttpInfoAsync(OAuthConfig body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'body' when calling AdminAuthenticationApi->CreateOAuthConfig");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuthConfig>("/iam/v1/oauth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a player auth object. Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse DeleteAuthPlayer(string id)
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = DeleteAuthPlayerWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a player auth object. Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> DeleteAuthPlayerWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling AdminAuthenticationApi->DeleteAuthPlayer");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<AuthPlayerResponse>("/iam/v1/players/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a player auth object. Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> DeleteAuthPlayerAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await DeleteAuthPlayerWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a player auth object. Deletes a player auth object.  It will delete all linked accounts the player is authenticated with.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique player ID (starts with pla_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> DeleteAuthPlayerWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling AdminAuthenticationApi->DeleteAuthPlayer");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<AuthPlayerResponse>("/iam/v1/players/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAuthPlayer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete oauth configuration. The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns></returns>
        public void DeleteOAuthConfig(OAuthProvider provider)
        {
            DeleteOAuthConfigWithHttpInfo(provider);
        }

        /// <summary>
        /// Delete oauth configuration. The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Openfort.SDK.Client.ApiResponse<Object> DeleteOAuthConfigWithHttpInfo(OAuthProvider provider)
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/iam/v1/oauth/{provider}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete oauth configuration. The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteOAuthConfigAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteOAuthConfigWithHttpInfoAsync(provider, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete oauth configuration. The endpoint deletes oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<Object>> DeleteOAuthConfigWithHttpInfoAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/iam/v1/oauth/{provider}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List authenticated players. Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <returns>AuthPlayerListResponse</returns>
        public AuthPlayerListResponse GetAuthPlayers(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerListResponse> localVarResponse = GetAuthPlayersWithHttpInfo(limit, skip, order, email);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List authenticated players. Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <returns>ApiResponse of AuthPlayerListResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerListResponse> GetAuthPlayersWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string))
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthPlayerListResponse>("/iam/v1/players", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List authenticated players. Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerListResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerListResponse> GetAuthPlayersAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerListResponse> localVarResponse = await GetAuthPlayersWithHttpInfoAsync(limit, skip, order, email, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List authenticated players. Retrieves a list of authenticated players.  Players have linked accounts and are authenticated with a provider.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="email">Specifies the email address of the user. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerListResponse>> GetAuthPlayersWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), string email = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthPlayerListResponse>("/iam/v1/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAuthPlayers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get oauth configuration. The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>OAuthConfig</returns>
        public OAuthConfig GetOAuthConfig(OAuthProvider provider)
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfig> localVarResponse = GetOAuthConfigWithHttpInfo(provider);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get oauth configuration. The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <returns>ApiResponse of OAuthConfig</returns>
        public Openfort.SDK.Client.ApiResponse<OAuthConfig> GetOAuthConfigWithHttpInfo(OAuthProvider provider)
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuthConfig>("/iam/v1/oauth/{provider}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get oauth configuration. The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfig</returns>
        public async System.Threading.Tasks.Task<OAuthConfig> GetOAuthConfigAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfig> localVarResponse = await GetOAuthConfigWithHttpInfoAsync(provider, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get oauth configuration. The endpoint retrieves oauth configuration for specified provider for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">Specifies the oauth provider type.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfig)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<OAuthConfig>> GetOAuthConfigWithHttpInfoAsync(OAuthProvider provider, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuthConfig>("/iam/v1/oauth/{provider}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of oauth configurations. List configured OAuth methods for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>OAuthConfigListResponse</returns>
        public OAuthConfigListResponse ListOAuthConfig()
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfigListResponse> localVarResponse = ListOAuthConfigWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of oauth configurations. List configured OAuth methods for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of OAuthConfigListResponse</returns>
        public Openfort.SDK.Client.ApiResponse<OAuthConfigListResponse> ListOAuthConfigWithHttpInfo()
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OAuthConfigListResponse>("/iam/v1/oauth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List of oauth configurations. List configured OAuth methods for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthConfigListResponse</returns>
        public async System.Threading.Tasks.Task<OAuthConfigListResponse> ListOAuthConfigAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<OAuthConfigListResponse> localVarResponse = await ListOAuthConfigWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List of oauth configurations. List configured OAuth methods for the current project environment.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthConfigListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<OAuthConfigListResponse>> ListOAuthConfigWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OAuthConfigListResponse>("/iam/v1/oauth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListOAuthConfig", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify auth token. Verifies the token generated by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <returns>AuthSessionResponse</returns>
        public AuthSessionResponse VerifyAuthToken(string token)
        {
            Openfort.SDK.Client.ApiResponse<AuthSessionResponse> localVarResponse = VerifyAuthTokenWithHttpInfo(token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify auth token. Verifies the token generated by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <returns>ApiResponse of AuthSessionResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthSessionResponse> VerifyAuthTokenWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'token' when calling AdminAuthenticationApi->VerifyAuthToken");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthSessionResponse>("/iam/v1/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify auth token. Verifies the token generated by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthSessionResponse</returns>
        public async System.Threading.Tasks.Task<AuthSessionResponse> VerifyAuthTokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthSessionResponse> localVarResponse = await VerifyAuthTokenWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify auth token. Verifies the token generated by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Specifies the auth token.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthSessionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthSessionResponse>> VerifyAuthTokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'token' when calling AdminAuthenticationApi->VerifyAuthToken");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthSessionResponse>("/iam/v1/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        [Obsolete]
        public PlayerResponse VerifyOAuth(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = VerifyOAuthWithHttpInfo(provider, oAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        [Obsolete]
        public Openfort.SDK.Client.ApiResponse<PlayerResponse> VerifyOAuthWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AdminAuthenticationApi->VerifyOAuth");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayerResponse>("/iam/v1/oauth/{provider}/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = await VerifyOAuthWithHttpInfoAsync(provider, oAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<PlayerResponse>> VerifyOAuthWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AdminAuthenticationApi->VerifyOAuth");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayerResponse>("/iam/v1/oauth/{provider}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        public PlayerResponse VerifyOAuthToken(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = VerifyOAuthTokenWithHttpInfo(authenticateOAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<PlayerResponse> VerifyOAuthTokenWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AdminAuthenticationApi->VerifyOAuthToken");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayerResponse>("/iam/v1/oauth/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        public async System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthTokenAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = await VerifyOAuthTokenWithHttpInfoAsync(authenticateOAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<PlayerResponse>> VerifyOAuthTokenWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AdminAuthenticationApi->VerifyOAuthToken");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayerResponse>("/iam/v1/oauth/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
