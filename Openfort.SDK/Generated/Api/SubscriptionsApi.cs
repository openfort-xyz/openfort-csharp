/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Openfort.SDK.Client;
using Openfort.SDK.Model;

namespace Openfort.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create subscription for project.
        /// </summary>
        /// <remarks>
        /// Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse CreateSubscription(CreateSubscriptionRequest createSubscriptionRequest);

        /// <summary>
        /// Create subscription for project.
        /// </summary>
        /// <remarks>
        /// Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequest createSubscriptionRequest);
        /// <summary>
        /// Create trigger for subscription.
        /// </summary>
        /// <remarks>
        /// Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <returns>TriggerResponse</returns>
        TriggerResponse CreateTrigger(string id, CreateTriggerRequest createTriggerRequest);

        /// <summary>
        /// Create trigger for subscription.
        /// </summary>
        /// <remarks>
        /// Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <returns>ApiResponse of TriggerResponse</returns>
        ApiResponse<TriggerResponse> CreateTriggerWithHttpInfo(string id, CreateTriggerRequest createTriggerRequest);
        /// <summary>
        /// Delete subscription of project.
        /// </summary>
        /// <remarks>
        /// Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>SubscriptionDeleteResponse</returns>
        SubscriptionDeleteResponse DeleteSubscription(string id);

        /// <summary>
        /// Delete subscription of project.
        /// </summary>
        /// <remarks>
        /// Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of SubscriptionDeleteResponse</returns>
        ApiResponse<SubscriptionDeleteResponse> DeleteSubscriptionWithHttpInfo(string id);
        /// <summary>
        /// Delete trigger of subscription.
        /// </summary>
        /// <remarks>
        /// Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>TriggerDeleteResponse</returns>
        TriggerDeleteResponse DeleteTrigger(string id, string triggerId);

        /// <summary>
        /// Delete trigger of subscription.
        /// </summary>
        /// <remarks>
        /// Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of TriggerDeleteResponse</returns>
        ApiResponse<TriggerDeleteResponse> DeleteTriggerWithHttpInfo(string id, string triggerId);
        /// <summary>
        /// Get subscription of project.
        /// </summary>
        /// <remarks>
        /// Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>SubscriptionResponse</returns>
        SubscriptionResponse GetSubscription(string id);

        /// <summary>
        /// Get subscription of project.
        /// </summary>
        /// <remarks>
        /// Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        ApiResponse<SubscriptionResponse> GetSubscriptionWithHttpInfo(string id);
        /// <summary>
        /// List subscriptions of project.
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SubscriptionListResponse</returns>
        SubscriptionListResponse GetSubscriptions();

        /// <summary>
        /// List subscriptions of project.
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SubscriptionListResponse</returns>
        ApiResponse<SubscriptionListResponse> GetSubscriptionsWithHttpInfo();
        /// <summary>
        /// Get trigger by id.
        /// </summary>
        /// <remarks>
        /// Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>TriggerResponse</returns>
        TriggerResponse GetTrigger(string id, string triggerId);

        /// <summary>
        /// Get trigger by id.
        /// </summary>
        /// <remarks>
        /// Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of TriggerResponse</returns>
        ApiResponse<TriggerResponse> GetTriggerWithHttpInfo(string id, string triggerId);
        /// <summary>
        /// List triggers of subscription.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>BaseEntityListResponseTriggerResponse</returns>
        BaseEntityListResponseTriggerResponse GetTriggers(string id);

        /// <summary>
        /// List triggers of subscription.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of BaseEntityListResponseTriggerResponse</returns>
        ApiResponse<BaseEntityListResponseTriggerResponse> GetTriggersWithHttpInfo(string id);
        /// <summary>
        /// List logs of triggered subscriptions.
        /// </summary>
        /// <remarks>
        /// Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <returns>BaseEntityListResponseLogResponse</returns>
        BaseEntityListResponseLogResponse ListSubscriptionLogs(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string));

        /// <summary>
        /// List logs of triggered subscriptions.
        /// </summary>
        /// <remarks>
        /// Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseLogResponse</returns>
        ApiResponse<BaseEntityListResponseLogResponse> ListSubscriptionLogsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string));
        /// <summary>
        /// Test trigger by id.
        /// </summary>
        /// <remarks>
        /// Test a trigger  Returns a trigger for the given id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void TestTrigger();

        /// <summary>
        /// Test trigger by id.
        /// </summary>
        /// <remarks>
        /// Test a trigger  Returns a trigger for the given id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestTriggerWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create subscription for project.
        /// </summary>
        /// <remarks>
        /// Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> CreateSubscriptionAsync(CreateSubscriptionRequest createSubscriptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create subscription for project.
        /// </summary>
        /// <remarks>
        /// Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequest createSubscriptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create trigger for subscription.
        /// </summary>
        /// <remarks>
        /// Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerResponse</returns>
        System.Threading.Tasks.Task<TriggerResponse> CreateTriggerAsync(string id, CreateTriggerRequest createTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create trigger for subscription.
        /// </summary>
        /// <remarks>
        /// Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerResponse>> CreateTriggerWithHttpInfoAsync(string id, CreateTriggerRequest createTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete subscription of project.
        /// </summary>
        /// <remarks>
        /// Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionDeleteResponse</returns>
        System.Threading.Tasks.Task<SubscriptionDeleteResponse> DeleteSubscriptionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete subscription of project.
        /// </summary>
        /// <remarks>
        /// Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionDeleteResponse>> DeleteSubscriptionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete trigger of subscription.
        /// </summary>
        /// <remarks>
        /// Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerDeleteResponse</returns>
        System.Threading.Tasks.Task<TriggerDeleteResponse> DeleteTriggerAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete trigger of subscription.
        /// </summary>
        /// <remarks>
        /// Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerDeleteResponse>> DeleteTriggerWithHttpInfoAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get subscription of project.
        /// </summary>
        /// <remarks>
        /// Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        System.Threading.Tasks.Task<SubscriptionResponse> GetSubscriptionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get subscription of project.
        /// </summary>
        /// <remarks>
        /// Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionResponse>> GetSubscriptionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List subscriptions of project.
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionListResponse</returns>
        System.Threading.Tasks.Task<SubscriptionListResponse> GetSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List subscriptions of project.
        /// </summary>
        /// <remarks>
        /// Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionListResponse>> GetSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get trigger by id.
        /// </summary>
        /// <remarks>
        /// Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerResponse</returns>
        System.Threading.Tasks.Task<TriggerResponse> GetTriggerAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get trigger by id.
        /// </summary>
        /// <remarks>
        /// Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TriggerResponse>> GetTriggerWithHttpInfoAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List triggers of subscription.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseTriggerResponse</returns>
        System.Threading.Tasks.Task<BaseEntityListResponseTriggerResponse> GetTriggersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List triggers of subscription.
        /// </summary>
        /// <remarks>
        /// Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseTriggerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseEntityListResponseTriggerResponse>> GetTriggersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List logs of triggered subscriptions.
        /// </summary>
        /// <remarks>
        /// Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseLogResponse</returns>
        System.Threading.Tasks.Task<BaseEntityListResponseLogResponse> ListSubscriptionLogsAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List logs of triggered subscriptions.
        /// </summary>
        /// <remarks>
        /// Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseLogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BaseEntityListResponseLogResponse>> ListSubscriptionLogsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Test trigger by id.
        /// </summary>
        /// <remarks>
        /// Test a trigger  Returns a trigger for the given id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestTriggerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Test trigger by id.
        /// </summary>
        /// <remarks>
        /// Test a trigger  Returns a trigger for the given id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestTriggerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscriptionsApi : ISubscriptionsApiSync, ISubscriptionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscriptionsApi : IDisposable, ISubscriptionsApi
    {
        private Openfort.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public SubscriptionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public SubscriptionsApi(string basePath)
        {
            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public SubscriptionsApi(Openfort.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public SubscriptionsApi(HttpClient client, Openfort.SDK.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscriptionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public SubscriptionsApi(Openfort.SDK.Client.ISynchronousClient client, Openfort.SDK.Client.IAsynchronousClient asyncClient, Openfort.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.SDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create subscription for project. Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse CreateSubscription(CreateSubscriptionRequest createSubscriptionRequest)
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionResponse> localVarResponse = CreateSubscriptionWithHttpInfo(createSubscriptionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription for project. Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Openfort.SDK.Client.ApiResponse<SubscriptionResponse> CreateSubscriptionWithHttpInfo(CreateSubscriptionRequest createSubscriptionRequest)
        {
            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSubscriptionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create subscription for project. Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> CreateSubscriptionAsync(CreateSubscriptionRequest createSubscriptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionResponse> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(createSubscriptionRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create subscription for project. Creates a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubscriptionRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<SubscriptionResponse>> CreateSubscriptionWithHttpInfoAsync(CreateSubscriptionRequest createSubscriptionRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSubscriptionRequest' is set
            if (createSubscriptionRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createSubscriptionRequest' when calling SubscriptionsApi->CreateSubscription");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createSubscriptionRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create trigger for subscription. Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <returns>TriggerResponse</returns>
        public TriggerResponse CreateTrigger(string id, CreateTriggerRequest createTriggerRequest)
        {
            Openfort.SDK.Client.ApiResponse<TriggerResponse> localVarResponse = CreateTriggerWithHttpInfo(id, createTriggerRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create trigger for subscription. Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <returns>ApiResponse of TriggerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<TriggerResponse> CreateTriggerWithHttpInfo(string id, CreateTriggerRequest createTriggerRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CreateTrigger");

            // verify the required parameter 'createTriggerRequest' is set
            if (createTriggerRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createTriggerRequest' when calling SubscriptionsApi->CreateTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createTriggerRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TriggerResponse>("/v1/subscriptions/{id}/triggers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create trigger for subscription. Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerResponse</returns>
        public async System.Threading.Tasks.Task<TriggerResponse> CreateTriggerAsync(string id, CreateTriggerRequest createTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<TriggerResponse> localVarResponse = await CreateTriggerWithHttpInfoAsync(id, createTriggerRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create trigger for subscription. Creates a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="createTriggerRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<TriggerResponse>> CreateTriggerWithHttpInfoAsync(string id, CreateTriggerRequest createTriggerRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->CreateTrigger");

            // verify the required parameter 'createTriggerRequest' is set
            if (createTriggerRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'createTriggerRequest' when calling SubscriptionsApi->CreateTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = createTriggerRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TriggerResponse>("/v1/subscriptions/{id}/triggers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete subscription of project. Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>SubscriptionDeleteResponse</returns>
        public SubscriptionDeleteResponse DeleteSubscription(string id)
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionDeleteResponse> localVarResponse = DeleteSubscriptionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete subscription of project. Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of SubscriptionDeleteResponse</returns>
        public Openfort.SDK.Client.ApiResponse<SubscriptionDeleteResponse> DeleteSubscriptionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DeleteSubscription");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SubscriptionDeleteResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete subscription of project. Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionDeleteResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionDeleteResponse> DeleteSubscriptionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionDeleteResponse> localVarResponse = await DeleteSubscriptionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete subscription of project. Deletes a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<SubscriptionDeleteResponse>> DeleteSubscriptionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DeleteSubscription");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SubscriptionDeleteResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete trigger of subscription. Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>TriggerDeleteResponse</returns>
        public TriggerDeleteResponse DeleteTrigger(string id, string triggerId)
        {
            Openfort.SDK.Client.ApiResponse<TriggerDeleteResponse> localVarResponse = DeleteTriggerWithHttpInfo(id, triggerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete trigger of subscription. Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of TriggerDeleteResponse</returns>
        public Openfort.SDK.Client.ApiResponse<TriggerDeleteResponse> DeleteTriggerWithHttpInfo(string id, string triggerId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DeleteTrigger");

            // verify the required parameter 'triggerId' is set
            if (triggerId == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'triggerId' when calling SubscriptionsApi->DeleteTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("triggerId", Openfort.SDK.Client.ClientUtils.ParameterToString(triggerId)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<TriggerDeleteResponse>("/v1/subscriptions/{id}/triggers/{triggerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete trigger of subscription. Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerDeleteResponse</returns>
        public async System.Threading.Tasks.Task<TriggerDeleteResponse> DeleteTriggerAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<TriggerDeleteResponse> localVarResponse = await DeleteTriggerWithHttpInfoAsync(id, triggerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete trigger of subscription. Deletes a trigger for the given subscription.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<TriggerDeleteResponse>> DeleteTriggerWithHttpInfoAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->DeleteTrigger");

            // verify the required parameter 'triggerId' is set
            if (triggerId == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'triggerId' when calling SubscriptionsApi->DeleteTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("triggerId", Openfort.SDK.Client.ClientUtils.ParameterToString(triggerId)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<TriggerDeleteResponse>("/v1/subscriptions/{id}/triggers/{triggerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subscription of project. Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>SubscriptionResponse</returns>
        public SubscriptionResponse GetSubscription(string id)
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionResponse> localVarResponse = GetSubscriptionWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription of project. Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of SubscriptionResponse</returns>
        public Openfort.SDK.Client.ApiResponse<SubscriptionResponse> GetSubscriptionWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subscription of project. Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionResponse> GetSubscriptionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionResponse> localVarResponse = await GetSubscriptionWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscription of project. Returns a subscription for the given project.  This object represents the subscription where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<SubscriptionResponse>> GetSubscriptionWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetSubscription");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionResponse>("/v1/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List subscriptions of project. Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SubscriptionListResponse</returns>
        public SubscriptionListResponse GetSubscriptions()
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionListResponse> localVarResponse = GetSubscriptionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscriptions of project. Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SubscriptionListResponse</returns>
        public Openfort.SDK.Client.ApiResponse<SubscriptionListResponse> GetSubscriptionsWithHttpInfo()
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SubscriptionListResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List subscriptions of project. Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionListResponse</returns>
        public async System.Threading.Tasks.Task<SubscriptionListResponse> GetSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<SubscriptionListResponse> localVarResponse = await GetSubscriptionsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List subscriptions of project. Returns a list of subscriptions for the given project.  This object represents the subscriptions where the project owner has subscribed to.  Subscriptions are returned sorted by creation date, with the most recently created subscriptions appearing first.  By default, a maximum of 10 subscriptions are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionListResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<SubscriptionListResponse>> GetSubscriptionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<SubscriptionListResponse>("/v1/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get trigger by id. Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>TriggerResponse</returns>
        public TriggerResponse GetTrigger(string id, string triggerId)
        {
            Openfort.SDK.Client.ApiResponse<TriggerResponse> localVarResponse = GetTriggerWithHttpInfo(id, triggerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get trigger by id. Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of TriggerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<TriggerResponse> GetTriggerWithHttpInfo(string id, string triggerId)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetTrigger");

            // verify the required parameter 'triggerId' is set
            if (triggerId == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'triggerId' when calling SubscriptionsApi->GetTrigger");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("triggerId", Openfort.SDK.Client.ClientUtils.ParameterToString(triggerId)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TriggerResponse>("/v1/subscriptions/{id}/triggers/{triggerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get trigger by id. Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TriggerResponse</returns>
        public async System.Threading.Tasks.Task<TriggerResponse> GetTriggerAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<TriggerResponse> localVarResponse = await GetTriggerWithHttpInfoAsync(id, triggerId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get trigger by id. Returns a trigger for the given id.  This object represents the trigger where the subscription owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="triggerId">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TriggerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<TriggerResponse>> GetTriggerWithHttpInfoAsync(string id, string triggerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetTrigger");

            // verify the required parameter 'triggerId' is set
            if (triggerId == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'triggerId' when calling SubscriptionsApi->GetTrigger");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.PathParameters.Add("triggerId", Openfort.SDK.Client.ClientUtils.ParameterToString(triggerId)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<TriggerResponse>("/v1/subscriptions/{id}/triggers/{triggerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List triggers of subscription. Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>BaseEntityListResponseTriggerResponse</returns>
        public BaseEntityListResponseTriggerResponse GetTriggers(string id)
        {
            Openfort.SDK.Client.ApiResponse<BaseEntityListResponseTriggerResponse> localVarResponse = GetTriggersWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List triggers of subscription. Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <returns>ApiResponse of BaseEntityListResponseTriggerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<BaseEntityListResponseTriggerResponse> GetTriggersWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetTriggers");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BaseEntityListResponseTriggerResponse>("/v1/subscriptions/{id}/triggers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTriggers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List triggers of subscription. Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseTriggerResponse</returns>
        public async System.Threading.Tasks.Task<BaseEntityListResponseTriggerResponse> GetTriggersAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<BaseEntityListResponseTriggerResponse> localVarResponse = await GetTriggersWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List triggers of subscription. Returns a list of triggers for the given subscription.  This object represents the triggers where the subscription owner has subscribed to.  Triggers are returned sorted by creation date, with the most recently created triggers appearing first.  By default, a maximum of 10 triggers are shown per page.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the unique subscription ID (starts with sub_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseTriggerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<BaseEntityListResponseTriggerResponse>> GetTriggersWithHttpInfoAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'id' when calling SubscriptionsApi->GetTriggers");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Openfort.SDK.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BaseEntityListResponseTriggerResponse>("/v1/subscriptions/{id}/triggers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTriggers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List logs of triggered subscriptions. Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <returns>BaseEntityListResponseLogResponse</returns>
        public BaseEntityListResponseLogResponse ListSubscriptionLogs(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string))
        {
            Openfort.SDK.Client.ApiResponse<BaseEntityListResponseLogResponse> localVarResponse = ListSubscriptionLogsWithHttpInfo(limit, skip, order, topic, status, _object, subscription, trigger, requestID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List logs of triggered subscriptions. Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <returns>ApiResponse of BaseEntityListResponseLogResponse</returns>
        public Openfort.SDK.Client.ApiResponse<BaseEntityListResponseLogResponse> ListSubscriptionLogsWithHttpInfo(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string))
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (topic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (subscription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "subscription", subscription));
            }
            if (trigger != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "trigger", trigger));
            }
            if (requestID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "requestID", requestID));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BaseEntityListResponseLogResponse>("/v1/subscriptions/logs", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List logs of triggered subscriptions. Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BaseEntityListResponseLogResponse</returns>
        public async System.Threading.Tasks.Task<BaseEntityListResponseLogResponse> ListSubscriptionLogsAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<BaseEntityListResponseLogResponse> localVarResponse = await ListSubscriptionLogsWithHttpInfoAsync(limit, skip, order, topic, status, _object, subscription, trigger, requestID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List logs of triggered subscriptions. Lists logs of the triggered subscriptions for the given project.  This object represents the logs of the triggered subscriptions where the project owner has subscribed to.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the maximum number of records to return. (optional)</param>
        /// <param name="skip">Specifies the offset for the first records to return. (optional)</param>
        /// <param name="order">Specifies the order in which to sort the results. (optional)</param>
        /// <param name="topic">Specifies the topic of the subscription logs (optional)</param>
        /// <param name="status">Specifies the status of the subscription logs (optional)</param>
        /// <param name="_object">Specifies the object ID of the object related to triggered notification (optional)</param>
        /// <param name="subscription">Specifies the subscription ID (optional)</param>
        /// <param name="trigger">Specifies the trigger ID (optional)</param>
        /// <param name="requestID">Specifies the request ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BaseEntityListResponseLogResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<BaseEntityListResponseLogResponse>> ListSubscriptionLogsWithHttpInfoAsync(int? limit = default(int?), int? skip = default(int?), SortOrder? order = default(SortOrder?), APITopic? topic = default(APITopic?), Status? status = default(Status?), string _object = default(string), string subscription = default(string), string trigger = default(string), string requestID = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (skip != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "skip", skip));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (topic != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "topic", topic));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (_object != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "object", _object));
            }
            if (subscription != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "subscription", subscription));
            }
            if (trigger != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "trigger", trigger));
            }
            if (requestID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Openfort.SDK.Client.ClientUtils.ParameterToMultiMap("", "requestID", requestID));
            }

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BaseEntityListResponseLogResponse>("/v1/subscriptions/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionLogs", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test trigger by id. Test a trigger  Returns a trigger for the given id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void TestTrigger()
        {
            TestTriggerWithHttpInfo();
        }

        /// <summary>
        /// Test trigger by id. Test a trigger  Returns a trigger for the given id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public Openfort.SDK.Client.ApiResponse<Object> TestTriggerWithHttpInfo()
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v1/subscriptions/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Test trigger by id. Test a trigger  Returns a trigger for the given id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestTriggerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TestTriggerWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Test trigger by id. Test a trigger  Returns a trigger for the given id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<Object>> TestTriggerWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v1/subscriptions/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestTrigger", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
