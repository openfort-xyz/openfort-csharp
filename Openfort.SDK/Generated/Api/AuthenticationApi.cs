/*
 * Openfort API
 *
 * Complete Openfort API references and guides can be found at: https://openfort.xyz/docs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@openfort.xyz
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Openfort.SDK.Client;
using Openfort.SDK.Model;

namespace Openfort.SDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Authenticate player with oauth token.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>AuthResponse</returns>
        AuthResponse AuthenticateOAuth(AuthenticateOAuthRequest authenticateOAuthRequest);

        /// <summary>
        /// Authenticate player with oauth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> AuthenticateOAuthWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest);
        /// <summary>
        /// Authenticate player with SIWE
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>AuthResponse</returns>
        AuthResponse AuthenticateSIWE(SIWEAuthenticateRequest sIWEAuthenticateRequest);

        /// <summary>
        /// Authenticate player with SIWE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> AuthenticateSIWEWithHttpInfo(SIWEAuthenticateRequest sIWEAuthenticateRequest);
        /// <summary>
        /// Authorize player with token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        DeprecatedAuthenticatedPlayerResponse AuthorizeWithOAuthToken(OAuthProvider provider, OAuthRequest oAuthRequest);

        /// <summary>
        /// Authorize player with token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        ApiResponse<DeprecatedAuthenticatedPlayerResponse> AuthorizeWithOAuthTokenWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest);
        /// <summary>
        /// Get the jwks.json file.
        /// </summary>
        /// <remarks>
        /// Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <returns>JwtKeyResponse</returns>
        JwtKeyResponse GetJwks(string publishableKey);

        /// <summary>
        /// Get the jwks.json file.
        /// </summary>
        /// <remarks>
        /// Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <returns>ApiResponse of JwtKeyResponse</returns>
        ApiResponse<JwtKeyResponse> GetJwksWithHttpInfo(string publishableKey);
        /// <summary>
        /// Initialize OAuth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <returns>OAuthResponse</returns>
        OAuthResponse InitOAuth(OAuthInitRequest oAuthInitRequest);

        /// <summary>
        /// Initialize OAuth.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <returns>ApiResponse of OAuthResponse</returns>
        ApiResponse<OAuthResponse> InitOAuthWithHttpInfo(OAuthInitRequest oAuthInitRequest);
        /// <summary>
        /// Initialize SIWE.
        /// </summary>
        /// <remarks>
        /// Create a challenge to link external wallet to the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>SIWEInitResponse</returns>
        SIWEInitResponse InitSIWE(SIWERequest sIWERequest);

        /// <summary>
        /// Initialize SIWE.
        /// </summary>
        /// <remarks>
        /// Create a challenge to link external wallet to the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>ApiResponse of SIWEInitResponse</returns>
        ApiResponse<SIWEInitResponse> InitSIWEWithHttpInfo(SIWERequest sIWERequest);
        /// <summary>
        /// Link external wallet.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse LinkSIWE(SIWEAuthenticateRequest sIWEAuthenticateRequest);

        /// <summary>
        /// Link external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> LinkSIWEWithHttpInfo(SIWEAuthenticateRequest sIWEAuthenticateRequest);
        /// <summary>
        /// Email and password login.
        /// </summary>
        /// <remarks>
        /// Authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <returns>AuthResponse</returns>
        AuthResponse LoginEmailPassword(LoginRequest loginRequest);

        /// <summary>
        /// Email and password login.
        /// </summary>
        /// <remarks>
        /// Authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> LoginEmailPasswordWithHttpInfo(LoginRequest loginRequest);
        /// <summary>
        /// Log out a player.
        /// </summary>
        /// <remarks>
        /// When using Openfort Auth, the endpoint logs out the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <returns></returns>
        void Logout(LogoutRequest logoutRequest);

        /// <summary>
        /// Log out a player.
        /// </summary>
        /// <remarks>
        /// When using Openfort Auth, the endpoint logs out the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LogoutWithHttpInfo(LogoutRequest logoutRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse Me();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> MeWithHttpInfo();
        /// <summary>
        /// Refresh or create auth session.
        /// </summary>
        /// <remarks>
        /// Get or create a new session for the player based on the refresh token.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <returns>AuthResponse</returns>
        AuthResponse Refresh(RefreshTokenRequest refreshTokenRequest);

        /// <summary>
        /// Refresh or create auth session.
        /// </summary>
        /// <remarks>
        /// Get or create a new session for the player based on the refresh token.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> RefreshWithHttpInfo(RefreshTokenRequest refreshTokenRequest);
        /// <summary>
        /// Email and password signup.
        /// </summary>
        /// <remarks>
        /// Create and authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <returns>AuthResponse</returns>
        AuthResponse SignupEmailPassword(SignupRequest signupRequest);

        /// <summary>
        /// Email and password signup.
        /// </summary>
        /// <remarks>
        /// Create and authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        ApiResponse<AuthResponse> SignupEmailPasswordWithHttpInfo(SignupRequest signupRequest);
        /// <summary>
        /// Verify oauth token of a third party auth provider.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse ThirdParty(ThirdPartyOAuthRequest thirdPartyOAuthRequest);

        /// <summary>
        /// Verify oauth token of a third party auth provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> ThirdPartyWithHttpInfo(ThirdPartyOAuthRequest thirdPartyOAuthRequest);
        /// <summary>
        /// Unlink OAuth account
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse UnlinkOAuth(UnlinkRequest unlinkRequest);

        /// <summary>
        /// Unlink OAuth account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> UnlinkOAuthWithHttpInfo(UnlinkRequest unlinkRequest);
        /// <summary>
        /// Unlink external wallet.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        AuthPlayerResponse UnlinkSIWE(SIWERequest sIWERequest);

        /// <summary>
        /// Unlink external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        ApiResponse<AuthPlayerResponse> UnlinkSIWEWithHttpInfo(SIWERequest sIWERequest);
        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        [Obsolete]
        PlayerResponse VerifyOAuth(OAuthProvider provider, OAuthRequest oAuthRequest);

        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        [Obsolete]
        ApiResponse<PlayerResponse> VerifyOAuthWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest);
        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        PlayerResponse VerifyOAuthToken(AuthenticateOAuthRequest authenticateOAuthRequest);

        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        ApiResponse<PlayerResponse> VerifyOAuthTokenWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Authenticate player with oauth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> AuthenticateOAuthAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticate player with oauth token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> AuthenticateOAuthWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authenticate player with SIWE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> AuthenticateSIWEAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authenticate player with SIWE
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> AuthenticateSIWEWithHttpInfoAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Authorize player with token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<DeprecatedAuthenticatedPlayerResponse> AuthorizeWithOAuthTokenAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Authorize player with token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeprecatedAuthenticatedPlayerResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<DeprecatedAuthenticatedPlayerResponse>> AuthorizeWithOAuthTokenWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the jwks.json file.
        /// </summary>
        /// <remarks>
        /// Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JwtKeyResponse</returns>
        System.Threading.Tasks.Task<JwtKeyResponse> GetJwksAsync(string publishableKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the jwks.json file.
        /// </summary>
        /// <remarks>
        /// Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JwtKeyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<JwtKeyResponse>> GetJwksWithHttpInfoAsync(string publishableKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initialize OAuth.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthResponse</returns>
        System.Threading.Tasks.Task<OAuthResponse> InitOAuthAsync(OAuthInitRequest oAuthInitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initialize OAuth.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthResponse>> InitOAuthWithHttpInfoAsync(OAuthInitRequest oAuthInitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Initialize SIWE.
        /// </summary>
        /// <remarks>
        /// Create a challenge to link external wallet to the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SIWEInitResponse</returns>
        System.Threading.Tasks.Task<SIWEInitResponse> InitSIWEAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Initialize SIWE.
        /// </summary>
        /// <remarks>
        /// Create a challenge to link external wallet to the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SIWEInitResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SIWEInitResponse>> InitSIWEWithHttpInfoAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Link external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> LinkSIWEAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Link external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> LinkSIWEWithHttpInfoAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email and password login.
        /// </summary>
        /// <remarks>
        /// Authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> LoginEmailPasswordAsync(LoginRequest loginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email and password login.
        /// </summary>
        /// <remarks>
        /// Authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> LoginEmailPasswordWithHttpInfoAsync(LoginRequest loginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Log out a player.
        /// </summary>
        /// <remarks>
        /// When using Openfort Auth, the endpoint logs out the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LogoutAsync(LogoutRequest logoutRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Log out a player.
        /// </summary>
        /// <remarks>
        /// When using Openfort Auth, the endpoint logs out the player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LogoutWithHttpInfoAsync(LogoutRequest logoutRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> MeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> MeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refresh or create auth session.
        /// </summary>
        /// <remarks>
        /// Get or create a new session for the player based on the refresh token.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> RefreshAsync(RefreshTokenRequest refreshTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refresh or create auth session.
        /// </summary>
        /// <remarks>
        /// Get or create a new session for the player based on the refresh token.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> RefreshWithHttpInfoAsync(RefreshTokenRequest refreshTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Email and password signup.
        /// </summary>
        /// <remarks>
        /// Create and authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        System.Threading.Tasks.Task<AuthResponse> SignupEmailPasswordAsync(SignupRequest signupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Email and password signup.
        /// </summary>
        /// <remarks>
        /// Create and authenticate a player based on email and password.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthResponse>> SignupEmailPasswordWithHttpInfoAsync(SignupRequest signupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Verify oauth token of a third party auth provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> ThirdPartyAsync(ThirdPartyOAuthRequest thirdPartyOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Verify oauth token of a third party auth provider.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> ThirdPartyWithHttpInfoAsync(ThirdPartyOAuthRequest thirdPartyOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlink OAuth account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> UnlinkOAuthAsync(UnlinkRequest unlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlink OAuth account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> UnlinkOAuthWithHttpInfoAsync(UnlinkRequest unlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unlink external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        System.Threading.Tasks.Task<AuthPlayerResponse> UnlinkSIWEAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unlink external wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthPlayerResponse>> UnlinkSIWEWithHttpInfoAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player by token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> VerifyOAuthWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthTokenAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve player by oauth token.
        /// </summary>
        /// <remarks>
        /// The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </remarks>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerResponse>> VerifyOAuthTokenWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IAuthenticationApiSync, IAuthenticationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IDisposable, IAuthenticationApi
    {
        private Openfort.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AuthenticationApi(string basePath)
        {
            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AuthenticationApi(Openfort.SDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthenticationApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthenticationApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                new Openfort.SDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AuthenticationApi(HttpClient client, Openfort.SDK.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Openfort.SDK.Client.Configuration.MergeConfigurations(
                Openfort.SDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Openfort.SDK.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AuthenticationApi(Openfort.SDK.Client.ISynchronousClient client, Openfort.SDK.Client.IAsynchronousClient asyncClient, Openfort.SDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Openfort.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Openfort.SDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Openfort.SDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Openfort.SDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Openfort.SDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Openfort.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Authenticate player with oauth token. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>AuthResponse</returns>
        public AuthResponse AuthenticateOAuth(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = AuthenticateOAuthWithHttpInfo(authenticateOAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate player with oauth token. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthResponse> AuthenticateOAuthWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AuthenticationApi->AuthenticateOAuth");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/iam/v1/oauth/authenticate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticate player with oauth token. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> AuthenticateOAuthAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = await AuthenticateOAuthWithHttpInfoAsync(authenticateOAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate player with oauth token. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthResponse>> AuthenticateOAuthWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AuthenticationApi->AuthenticateOAuth");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/iam/v1/oauth/authenticate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticate player with SIWE 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>AuthResponse</returns>
        public AuthResponse AuthenticateSIWE(SIWEAuthenticateRequest sIWEAuthenticateRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = AuthenticateSIWEWithHttpInfo(sIWEAuthenticateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate player with SIWE 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthResponse> AuthenticateSIWEWithHttpInfo(SIWEAuthenticateRequest sIWEAuthenticateRequest)
        {
            // verify the required parameter 'sIWEAuthenticateRequest' is set
            if (sIWEAuthenticateRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWEAuthenticateRequest' when calling AuthenticationApi->AuthenticateSIWE");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWEAuthenticateRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/iam/v1/siwe/authenticate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authenticate player with SIWE 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> AuthenticateSIWEAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = await AuthenticateSIWEWithHttpInfoAsync(sIWEAuthenticateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate player with SIWE 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthResponse>> AuthenticateSIWEWithHttpInfoAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sIWEAuthenticateRequest' is set
            if (sIWEAuthenticateRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWEAuthenticateRequest' when calling AuthenticationApi->AuthenticateSIWE");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWEAuthenticateRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/iam/v1/siwe/authenticate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthenticateSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize player with token. The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        public DeprecatedAuthenticatedPlayerResponse AuthorizeWithOAuthToken(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<DeprecatedAuthenticatedPlayerResponse> localVarResponse = AuthorizeWithOAuthTokenWithHttpInfo(provider, oAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize player with token. The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        public Openfort.SDK.Client.ApiResponse<DeprecatedAuthenticatedPlayerResponse> AuthorizeWithOAuthTokenWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AuthenticationApi->AuthorizeWithOAuthToken");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DeprecatedAuthenticatedPlayerResponse>("/iam/v1/oauth/{provider}/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeWithOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Authorize player with token. The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeprecatedAuthenticatedPlayerResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<DeprecatedAuthenticatedPlayerResponse> AuthorizeWithOAuthTokenAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<DeprecatedAuthenticatedPlayerResponse> localVarResponse = await AuthorizeWithOAuthTokenWithHttpInfoAsync(provider, oAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Authorize player with token. The endpoint verifies the token generated by OAuth provider, creates or retrieves a player based on his email, and returns the jwt token for the player together with the player id.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeprecatedAuthenticatedPlayerResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<DeprecatedAuthenticatedPlayerResponse>> AuthorizeWithOAuthTokenWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AuthenticationApi->AuthorizeWithOAuthToken");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<DeprecatedAuthenticatedPlayerResponse>("/iam/v1/oauth/{provider}/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeWithOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the jwks.json file. Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <returns>JwtKeyResponse</returns>
        public JwtKeyResponse GetJwks(string publishableKey)
        {
            Openfort.SDK.Client.ApiResponse<JwtKeyResponse> localVarResponse = GetJwksWithHttpInfo(publishableKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the jwks.json file. Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <returns>ApiResponse of JwtKeyResponse</returns>
        public Openfort.SDK.Client.ApiResponse<JwtKeyResponse> GetJwksWithHttpInfo(string publishableKey)
        {
            // verify the required parameter 'publishableKey' is set
            if (publishableKey == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'publishableKey' when calling AuthenticationApi->GetJwks");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("publishable_key", Openfort.SDK.Client.ClientUtils.ParameterToString(publishableKey)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<JwtKeyResponse>("/iam/v1/{publishable_key}/jwks.json", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJwks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the jwks.json file. Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JwtKeyResponse</returns>
        public async System.Threading.Tasks.Task<JwtKeyResponse> GetJwksAsync(string publishableKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<JwtKeyResponse> localVarResponse = await GetJwksWithHttpInfoAsync(publishableKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the jwks.json file. Get the jwks.json file.  You can use the jwks.json file to verify the signature of a JWT token issued by Openfort Auth.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="publishableKey">Specifies the project publishable key (starts with pk_).</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JwtKeyResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<JwtKeyResponse>> GetJwksWithHttpInfoAsync(string publishableKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'publishableKey' is set
            if (publishableKey == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'publishableKey' when calling AuthenticationApi->GetJwks");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("publishable_key", Openfort.SDK.Client.ClientUtils.ParameterToString(publishableKey)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<JwtKeyResponse>("/iam/v1/{publishable_key}/jwks.json", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJwks", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize OAuth. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <returns>OAuthResponse</returns>
        public OAuthResponse InitOAuth(OAuthInitRequest oAuthInitRequest)
        {
            Openfort.SDK.Client.ApiResponse<OAuthResponse> localVarResponse = InitOAuthWithHttpInfo(oAuthInitRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize OAuth. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <returns>ApiResponse of OAuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<OAuthResponse> InitOAuthWithHttpInfo(OAuthInitRequest oAuthInitRequest)
        {
            // verify the required parameter 'oAuthInitRequest' is set
            if (oAuthInitRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthInitRequest' when calling AuthenticationApi->InitOAuth");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oAuthInitRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuthResponse>("/iam/v1/oauth/init", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize OAuth. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuthResponse</returns>
        public async System.Threading.Tasks.Task<OAuthResponse> InitOAuthAsync(OAuthInitRequest oAuthInitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<OAuthResponse> localVarResponse = await InitOAuthWithHttpInfoAsync(oAuthInitRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize OAuth. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="oAuthInitRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<OAuthResponse>> InitOAuthWithHttpInfoAsync(OAuthInitRequest oAuthInitRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oAuthInitRequest' is set
            if (oAuthInitRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthInitRequest' when calling AuthenticationApi->InitOAuth");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = oAuthInitRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuthResponse>("/iam/v1/oauth/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize SIWE. Create a challenge to link external wallet to the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>SIWEInitResponse</returns>
        public SIWEInitResponse InitSIWE(SIWERequest sIWERequest)
        {
            Openfort.SDK.Client.ApiResponse<SIWEInitResponse> localVarResponse = InitSIWEWithHttpInfo(sIWERequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize SIWE. Create a challenge to link external wallet to the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>ApiResponse of SIWEInitResponse</returns>
        public Openfort.SDK.Client.ApiResponse<SIWEInitResponse> InitSIWEWithHttpInfo(SIWERequest sIWERequest)
        {
            // verify the required parameter 'sIWERequest' is set
            if (sIWERequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWERequest' when calling AuthenticationApi->InitSIWE");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWERequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SIWEInitResponse>("/iam/v1/siwe/init", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Initialize SIWE. Create a challenge to link external wallet to the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SIWEInitResponse</returns>
        public async System.Threading.Tasks.Task<SIWEInitResponse> InitSIWEAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<SIWEInitResponse> localVarResponse = await InitSIWEWithHttpInfoAsync(sIWERequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize SIWE. Create a challenge to link external wallet to the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SIWEInitResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<SIWEInitResponse>> InitSIWEWithHttpInfoAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sIWERequest' is set
            if (sIWERequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWERequest' when calling AuthenticationApi->InitSIWE");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWERequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SIWEInitResponse>("/iam/v1/siwe/init", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InitSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse LinkSIWE(SIWEAuthenticateRequest sIWEAuthenticateRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = LinkSIWEWithHttpInfo(sIWEAuthenticateRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> LinkSIWEWithHttpInfo(SIWEAuthenticateRequest sIWEAuthenticateRequest)
        {
            // verify the required parameter 'sIWEAuthenticateRequest' is set
            if (sIWEAuthenticateRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWEAuthenticateRequest' when calling AuthenticationApi->LinkSIWE");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWEAuthenticateRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthPlayerResponse>("/iam/v1/siwe/link", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Link external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> LinkSIWEAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await LinkSIWEWithHttpInfoAsync(sIWEAuthenticateRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Link external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWEAuthenticateRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> LinkSIWEWithHttpInfoAsync(SIWEAuthenticateRequest sIWEAuthenticateRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sIWEAuthenticateRequest' is set
            if (sIWEAuthenticateRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWEAuthenticateRequest' when calling AuthenticationApi->LinkSIWE");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWEAuthenticateRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthPlayerResponse>("/iam/v1/siwe/link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email and password login. Authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <returns>AuthResponse</returns>
        public AuthResponse LoginEmailPassword(LoginRequest loginRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = LoginEmailPasswordWithHttpInfo(loginRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email and password login. Authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthResponse> LoginEmailPasswordWithHttpInfo(LoginRequest loginRequest)
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'loginRequest' when calling AuthenticationApi->LoginEmailPassword");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = loginRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/iam/v1/password/login", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email and password login. Authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> LoginEmailPasswordAsync(LoginRequest loginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = await LoginEmailPasswordWithHttpInfoAsync(loginRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email and password login. Authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthResponse>> LoginEmailPasswordWithHttpInfoAsync(LoginRequest loginRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'loginRequest' is set
            if (loginRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'loginRequest' when calling AuthenticationApi->LoginEmailPassword");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = loginRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/iam/v1/password/login", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LoginEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log out a player. When using Openfort Auth, the endpoint logs out the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <returns></returns>
        public void Logout(LogoutRequest logoutRequest)
        {
            LogoutWithHttpInfo(logoutRequest);
        }

        /// <summary>
        /// Log out a player. When using Openfort Auth, the endpoint logs out the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Openfort.SDK.Client.ApiResponse<Object> LogoutWithHttpInfo(LogoutRequest logoutRequest)
        {
            // verify the required parameter 'logoutRequest' is set
            if (logoutRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'logoutRequest' when calling AuthenticationApi->Logout");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = logoutRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/iam/v1/sessions/logout", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Log out a player. When using Openfort Auth, the endpoint logs out the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LogoutAsync(LogoutRequest logoutRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LogoutWithHttpInfoAsync(logoutRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Log out a player. When using Openfort Auth, the endpoint logs out the player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logoutRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<Object>> LogoutWithHttpInfoAsync(LogoutRequest logoutRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'logoutRequest' is set
            if (logoutRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'logoutRequest' when calling AuthenticationApi->Logout");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = logoutRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/iam/v1/sessions/logout", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Logout", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse Me()
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = MeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> MeWithHttpInfo()
        {
            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<AuthPlayerResponse>("/iam/v1/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Me", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> MeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await MeWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> MeWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AuthPlayerResponse>("/iam/v1/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Me", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh or create auth session. Get or create a new session for the player based on the refresh token.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <returns>AuthResponse</returns>
        public AuthResponse Refresh(RefreshTokenRequest refreshTokenRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = RefreshWithHttpInfo(refreshTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh or create auth session. Get or create a new session for the player based on the refresh token.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthResponse> RefreshWithHttpInfo(RefreshTokenRequest refreshTokenRequest)
        {
            // verify the required parameter 'refreshTokenRequest' is set
            if (refreshTokenRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'refreshTokenRequest' when calling AuthenticationApi->Refresh");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshTokenRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/iam/v1/sessions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refresh or create auth session. Get or create a new session for the player based on the refresh token.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> RefreshAsync(RefreshTokenRequest refreshTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = await RefreshWithHttpInfoAsync(refreshTokenRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refresh or create auth session. Get or create a new session for the player based on the refresh token.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="refreshTokenRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthResponse>> RefreshWithHttpInfoAsync(RefreshTokenRequest refreshTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'refreshTokenRequest' is set
            if (refreshTokenRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'refreshTokenRequest' when calling AuthenticationApi->Refresh");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = refreshTokenRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/iam/v1/sessions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Refresh", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email and password signup. Create and authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <returns>AuthResponse</returns>
        public AuthResponse SignupEmailPassword(SignupRequest signupRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = SignupEmailPasswordWithHttpInfo(signupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email and password signup. Create and authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <returns>ApiResponse of AuthResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthResponse> SignupEmailPasswordWithHttpInfo(SignupRequest signupRequest)
        {
            // verify the required parameter 'signupRequest' is set
            if (signupRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'signupRequest' when calling AuthenticationApi->SignupEmailPassword");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = signupRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthResponse>("/iam/v1/password/signup", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignupEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Email and password signup. Create and authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthResponse</returns>
        public async System.Threading.Tasks.Task<AuthResponse> SignupEmailPasswordAsync(SignupRequest signupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthResponse> localVarResponse = await SignupEmailPasswordWithHttpInfoAsync(signupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Email and password signup. Create and authenticate a player based on email and password.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signupRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthResponse>> SignupEmailPasswordWithHttpInfoAsync(SignupRequest signupRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'signupRequest' is set
            if (signupRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'signupRequest' when calling AuthenticationApi->SignupEmailPassword");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = signupRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthResponse>("/iam/v1/password/signup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SignupEmailPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify oauth token of a third party auth provider. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse ThirdParty(ThirdPartyOAuthRequest thirdPartyOAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = ThirdPartyWithHttpInfo(thirdPartyOAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify oauth token of a third party auth provider. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> ThirdPartyWithHttpInfo(ThirdPartyOAuthRequest thirdPartyOAuthRequest)
        {
            // verify the required parameter 'thirdPartyOAuthRequest' is set
            if (thirdPartyOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'thirdPartyOAuthRequest' when calling AuthenticationApi->ThirdParty");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = thirdPartyOAuthRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthPlayerResponse>("/iam/v1/oauth/third_party", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThirdParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Verify oauth token of a third party auth provider. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> ThirdPartyAsync(ThirdPartyOAuthRequest thirdPartyOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await ThirdPartyWithHttpInfoAsync(thirdPartyOAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verify oauth token of a third party auth provider. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="thirdPartyOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> ThirdPartyWithHttpInfoAsync(ThirdPartyOAuthRequest thirdPartyOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'thirdPartyOAuthRequest' is set
            if (thirdPartyOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'thirdPartyOAuthRequest' when calling AuthenticationApi->ThirdParty");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = thirdPartyOAuthRequest;

            // authentication (pk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthPlayerResponse>("/iam/v1/oauth/third_party", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ThirdParty", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink OAuth account 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse UnlinkOAuth(UnlinkRequest unlinkRequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = UnlinkOAuthWithHttpInfo(unlinkRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink OAuth account 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> UnlinkOAuthWithHttpInfo(UnlinkRequest unlinkRequest)
        {
            // verify the required parameter 'unlinkRequest' is set
            if (unlinkRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'unlinkRequest' when calling AuthenticationApi->UnlinkOAuth");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unlinkRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthPlayerResponse>("/iam/v1/oauth/unlink", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink OAuth account 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> UnlinkOAuthAsync(UnlinkRequest unlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await UnlinkOAuthWithHttpInfoAsync(unlinkRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink OAuth account 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="unlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> UnlinkOAuthWithHttpInfoAsync(UnlinkRequest unlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'unlinkRequest' is set
            if (unlinkRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'unlinkRequest' when calling AuthenticationApi->UnlinkOAuth");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = unlinkRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthPlayerResponse>("/iam/v1/oauth/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>AuthPlayerResponse</returns>
        public AuthPlayerResponse UnlinkSIWE(SIWERequest sIWERequest)
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = UnlinkSIWEWithHttpInfo(sIWERequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <returns>ApiResponse of AuthPlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> UnlinkSIWEWithHttpInfo(SIWERequest sIWERequest)
        {
            // verify the required parameter 'sIWERequest' is set
            if (sIWERequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWERequest' when calling AuthenticationApi->UnlinkSIWE");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWERequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthPlayerResponse>("/iam/v1/siwe/unlink", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unlink external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthPlayerResponse</returns>
        public async System.Threading.Tasks.Task<AuthPlayerResponse> UnlinkSIWEAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<AuthPlayerResponse> localVarResponse = await UnlinkSIWEWithHttpInfoAsync(sIWERequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unlink external wallet. 
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sIWERequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthPlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<AuthPlayerResponse>> UnlinkSIWEWithHttpInfoAsync(SIWERequest sIWERequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sIWERequest' is set
            if (sIWERequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'sIWERequest' when calling AuthenticationApi->UnlinkSIWE");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = sIWERequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthPlayerResponse>("/iam/v1/siwe/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkSIWE", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        [Obsolete]
        public PlayerResponse VerifyOAuth(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = VerifyOAuthWithHttpInfo(provider, oAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        [Obsolete]
        public Openfort.SDK.Client.ApiResponse<PlayerResponse> VerifyOAuthWithHttpInfo(OAuthProvider provider, OAuthRequest oAuthRequest)
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AuthenticationApi->VerifyOAuth");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayerResponse>("/iam/v1/oauth/{provider}/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = await VerifyOAuthWithHttpInfoAsync(provider, oAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="provider">OAuth provider</param>
        /// <param name="oAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<PlayerResponse>> VerifyOAuthWithHttpInfoAsync(OAuthProvider provider, OAuthRequest oAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'oAuthRequest' is set
            if (oAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'oAuthRequest' when calling AuthenticationApi->VerifyOAuth");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("provider", Openfort.SDK.Client.ClientUtils.ParameterToString(provider)); // path parameter
            localVarRequestOptions.Data = oAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayerResponse>("/iam/v1/oauth/{provider}/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuth", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>PlayerResponse</returns>
        public PlayerResponse VerifyOAuthToken(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = VerifyOAuthTokenWithHttpInfo(authenticateOAuthRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <returns>ApiResponse of PlayerResponse</returns>
        public Openfort.SDK.Client.ApiResponse<PlayerResponse> VerifyOAuthTokenWithHttpInfo(AuthenticateOAuthRequest authenticateOAuthRequest)
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AuthenticationApi->VerifyOAuthToken");

            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PlayerResponse>("/iam/v1/oauth/verify", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerResponse</returns>
        public async System.Threading.Tasks.Task<PlayerResponse> VerifyOAuthTokenAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Openfort.SDK.Client.ApiResponse<PlayerResponse> localVarResponse = await VerifyOAuthTokenWithHttpInfoAsync(authenticateOAuthRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve player by oauth token. The endpoint verifies the token generated by OAuth provider and retrieves a corresponding player.
        /// </summary>
        /// <exception cref="Openfort.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authenticateOAuthRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerResponse)</returns>
        public async System.Threading.Tasks.Task<Openfort.SDK.Client.ApiResponse<PlayerResponse>> VerifyOAuthTokenWithHttpInfoAsync(AuthenticateOAuthRequest authenticateOAuthRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'authenticateOAuthRequest' is set
            if (authenticateOAuthRequest == null)
                throw new Openfort.SDK.Client.ApiException(400, "Missing required parameter 'authenticateOAuthRequest' when calling AuthenticationApi->VerifyOAuthToken");


            Openfort.SDK.Client.RequestOptions localVarRequestOptions = new Openfort.SDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Openfort.SDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Openfort.SDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = authenticateOAuthRequest;

            // authentication (sk) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PlayerResponse>("/iam/v1/oauth/verify", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyOAuthToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
